main = "Cumulatiev Frequency Distribution")
ggplot(data = worldbank, aes(x = Population_growth)) +
stat_ecdf(geom = "step")+
labs(x = "Population Growth",
y = "Frequency",
main = "Cumulatiev Frequency Distribution")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = worldbank, aes(x = Population_growth)) +
stat_ecdf(geom = "step")+
labs(x = "Population Growth",
y = "Frequency",
title = "Cumulatiev Frequency Distribution")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = worldbank, aes(x = Population_growth)) +
stat_ecdf(geom = "step")+
labs(x = "Population Growth",
y = "Frequency",
title = "Cumulative Frequency Distribution")+
theme(plot.title = element_text(hjust = 0.5))
worldbank = read.delim("worldbank.tsv", sep='\t')
styler:::style_active_file()
### a) create two vectors
Customers <- c(33,22,41,39,38,46,47) |> as.integer()
####Customers <- as.integer(c(33,22,41,39,38,46,47))
Sales <- c(65.05, 80.17, 326.53, 137.88,
374.34, 329.04, 251.29)
### b) how to confirm the class and number of element
#### class and length for customers
class(Customers)
length(Customers)
#### class and length for sales
class(Sales)
length(Sales)
### a) create sales_per_customer
sales_per_customer <- Sales / Customers
sales_per_customer
### b) fix the wrong value
Sales[4] <- 317.88
sales_per_customer <- Sales / Customers
### c) total customers and total sales
sum(Customers)
sum(Sales)
### d) mean daily sales on the weekend
mean(Sales[1:2])
### e) mean daily sales on weekdays
#### positively
mean(Sales[3:7])
#### negatively
mean(Sales[-1:-2])
### f) the cost for web-designer
if (sum(Sales[3:7]) * 0.1 - 50 > 0){
print("The additional Sales is bigger")
} else{print("The cost is bigger")}
### e) mean daily sales on weekdays
#### positively
mean(Sales[3:7])
daily_customers <- c(33L, 22L, 41L, 39L, 38L, 46L, 47L)
daily_sales <- c(65.05, 80.17, 326.53, 317.88, 374.34, 329.04, 251.29)
### a) calculate the total number of customers
sum(daily_customers)
sum(daily_sales)
### b) the predicted weekly profit
daily_sales_with_strategy = c()
for (i in c(1:7)){
daily_sales_with_strategy[i] = (daily_sales[i]/daily_customers[i]) * (daily_customers[i] + 2)
}
sum(daily_sales_with_strategy) - 50
### c) write a function
weekly_profit <- function(d_customers, d_sales, w_ad_cost, addl_d_customs){
ave <- d_sales / d_customers
ave_new <- ave * addl_d_customs
return (sum(ave_new) + sum(d_sales) - w_ad_cost)
}
### d) the weekly profit without advertisement
weekly_profit(daily_customers, daily_sales, 0, 0)
### e) the weekly profit with the basic package
weekly_profit(daily_customers, daily_sales, 50, 2)
### a) the number of additional customers
additional <- seq(2,12, by = 2)
additional
### b) the costs of the advertising packages
weekly_cost <- cumsum(seq(50,100,by = 10))
weekly_cost
### c) the weekly profit under each scenario
profit_with_packages <- c()
for (i in c(1:6)){
profit_with_packages[i] <- weekly_profit(daily_customers, daily_sales,
weekly_cost[i], additional[i])
}
profit_with_packages
wp <- mapply(
weekly_profit,
weekly_cost,
additional,
MoreArgs = list(
d_customers = daily_customers,
d_sales = daily_sales
)
)
### b) find the maximum profit from wp
max(wp)
### c) find the advertising package that maximizes profit
which.max(wp)
knitr::opts_chunk$set(echo = TRUE)
customers <- as.integer(c(33, 22, 41, 39, 38, 46, 47))
sales <- c(65.05, 80.17, 326.53, 137.88, 374.34, 329.04, 251.29)
class(customers)
length(customers)
class(sales)
length(sales)
sales_per_customer <- sales/customers
sales[4] <- 317.88
sales_per_customer <- sales/customers
tot_cus <- sum(customers)
tot_sales <- sum(sales)
tot_cus
tot_sales
mean(sales[1:2])
mean(sales[3:7])
mean(sales[-1:-2])
sum(sales[3:7])*0.1
daily_customers <- c(33L, 22L, 41L, 39L, 38L, 46L, 47L)
daily_sales <- c(65.05, 80.17, 326.53, 317.88, 374.34, 329.04, 251.29)
total_cus <- function(cus){
return(sum(cus))
}
total_cus(daily_customers)
total_sum <- function(sale){
return(sum(sale))
}
total_sum(daily_sales)
avg <- daily_sales/daily_customers
avg_2 <- avg*2
sum(avg_2) + total_sum(daily_sales) -50
weekly_profit <- function(d_customers, d_sales, add, cost){
avg <- d_sales/d_customers
return(sum(avg*add)+sum(d_sales) - cost)
}
weekly_profit(daily_customers, daily_sales, 0, 0)
weekly_profit(daily_customers, daily_sales, 2, 50)
add_cus <- seq(2, 12, 2)
add_cost <- seq(50, 100, 10)
pat <- cumsum(add_cost)
pat
df <- as.data.frame(add_cus)
df$weekly_cost <- pat
weekly_profit(daily_customers, daily_sales, df[1,1], df[1,2])
weekly_profit(daily_customers, daily_sales, df[2,1], df[2,2])
weekly_profit(daily_customers, daily_sales, df[3,1], df[3,2])
weekly_profit(daily_customers, daily_sales, df[4,1], df[4,2])
weekly_profit(daily_customers, daily_sales, df[5,1], df[5,2])
weekly_profit(daily_customers, daily_sales, df[6,1], df[6,2])
wp <- mapply(weekly_profit, df[,1], df[,2], MoreArgs = list(d_customers = daily_customers,
d_sales = daily_sales))
wp
max(wp)
which.max(wp)
knitr::opts_chunk$set(echo = TRUE)
1/96
0.99 / (95 - 0.99*94)
1/96
data = matrix(c(80, 40, 40, 50), ncol=2, nrow=2)
colnames(data)= c("pancreatic cancer", "no pancreatic cancer")
row.names(data)= c("smoker", "no smokers")
data
(80+40) / (80+40+40+50)
(80+40) / (80+40+40+50)
80 / (80+40)
40 / (40 + 80)
(80) / (80+40+40+50)
(80 + 40) / (80+40+40+50)
(80 + 40) / (80+40+40+50)
0.5714286 ^ 2
categorical
(180-150) / 36
abs(180-150) / 36
abs(140-150) / 36
150 - (1/4 * 36)
150 - (1.4 * 36)
print("The tallest is" 150 + x)
x = 1.96 * 36
print("The tallest is" 150 + x)
print("The tallest is",150 + x)
print("The tallest is %f cm", 150 + x)
x = 1.96 * 36
print("The tallest is %f cm", 150 + x)
print("The tallest is %d cm", 150 + x)
sprintf("The tallest is %d cm", 150 + x)
sprintf("The tallest is %f cm", 150 + x)
sprintf("The tallest is %d cm", 150 + x)
sprintf("The tallest is %a cm", 150 + x)
sprintf("The tallest is %d cm", 150 + x)
sprintf("The tallest is %g cm", 150 + x)
x = 1.96 * 36
sprintf("The tallest is %g cm", 150 + x)
sprintf("The shortest is %g cm", 150 - x)
quantile(rnorm(4000, 150, 36), 0.025)
quantile(rnorm(4000, 150, 36), 0.025, 0.975)
quantile(rnorm(4000, 150, 36))
rnorm(4000, 150, 36)
quantile(rnorm(4000, 150, 36). 0.025)
quantile(rnorm(4000, 150, 36). 0.025)
quantile(rnorm(4000, 150, 36), 0.025)
quantile(rnorm(4000, 150, 36), 0.975)
quantile(rnorm(4000, 150, 36), 0.025)
quantile(rnorm(4000, 150, 36), 0.975)
sprintf("The individual is %g SDs", y, "average height.", x*z)
height <- function(mean, sd, height){
x = abs(mean - height) / sd
y = 0
z = 0
if (height > mean){
y = "above"
z = 1
}
else{
y = "below"
z = -1
}
sprintf("The individual is %g SDs", y, "average height.", x*z)
}
height(150,36,170)
height <- function(mean, sd, height){
x = abs(mean - height) / sd
y = 0
z = 0
if (height > mean){
y = "above"
z = 1
}
else{
y = "below"
z = -1
}
sprintf("The individual is %g SDs",x*z, y, "average height.")
}
height(150,36,170)
sprintf("The individual is %g SDs %s average height.", x*z, y)
height <- function(mean, sd, height){
x = abs(mean - height) / sd
y = 0
z = 0
if (height > mean){
y = "above"
z = 1
}
else{
y = "below"
z = -1
}
sprintf("The individual is %g SDs %s average height.", x*z, y)
}
height(150,36,170)
height <- function(mean, sd, height){
x = abs(mean - height) / sd
y = 0
z = 0
if (height > mean){
y = "above"
z = 1
}
else{
y = "below"
z = -1
}
sprintf("The individual is %f SDs %s average height.", x*z, y)
}
height(150,36,170)
sprintf("%f", pi)
sprintf("%.3f", pi)
sprintf("%1.0f", pi)
sprintf("%5.1f", pi)
sprintf("%05.1f", pi)
sprintf("%+f", pi)
sprintf("% f", pi)
height <- function(mean, sd, height){
x = abs(mean - height) / sd
y = 0
z = 0
if (height > mean){
y = "above"
z = 1
}
else{
y = "below"
z = -1
}
sprintf("The individual is %.2f SDs %s average height.", x*z, y)
}
height(150,36,170)
height(150,36,170)
height <- function(height){
x = abs(150 - height) / 36
y = 0
z = 0
if (height > mean){
y = "above"
z = 1
}
else{
y = "below"
z = -1
}
sprintf("The individual is %.2f SDs %s average height.", x*z, y)
}
height(170)
height <- function(height){
x = abs(150 - height) / 36
y = 0
z = 0
if (height > mean){
y = "above"
z = 1
}
else{
y = "below"
z = -1
}
sprintf("The individual is %.2f SDs %s average height.", x*z, y)
}
height(170)
height <- function(height){
x = abs(150 - height) / 36
y = 0
z = 0
if (height > 150){
y = "above"
z = 1
}
else{
y = "below"
z = -1
}
sprintf("The individual is %.2f SDs %s average height.", x*z, y)
}
height(170)
height(120)
height <- function(height){
x = abs(150 - height) / 36
y = 0
if (height > 150){
y = "above"
}
else{
y = "below"
}
sprintf("The individual is %.2f SDs %s average height.", x, y)
}
height(170)
height(120)
height(155)
height(90)
height <- function(height){
x <-  abs(150 - height) / 36
y <- 0
if (height > 150){
y <-  "above"
}
else{
y <-  "below"
}
sprintf("The individual is %.2f SDs %s average height.", x, y)
}
height(170)
patients <- c(50,30,20,10,10)
lesions <- c(0,1,2,3,4)
for (i in 1:5){
s <-  0
s <- s + (patients[i]*lesions[i])
s / sum(patients)
}
patients <- c(50,30,20,10,10)
lesions <- c(0,1,2,3,4)
for (i in 1:5){
s <-  0
s <- s + (patients[i]*lesions[i])
ans <- s / sum(patients)
sprintf("The mean is %.2f", ans)
}
patients <- c(50,30,20,10,10)
lesions <- c(0,1,2,3,4)
for (i in 1:5){
s <-  0
s <- s + (patients[i]*lesions[i])
ans <- s / sum(patients)
sprintf("The mean is %.2f", ans)
}
patients
patients <- c(50,30,20,10,10)
lesions <- c(0,1,2,3,4)
for (i in 1:5){
s <-  0
s <- s + (patients[i]*lesions[i])
ans <- s / sum(patients)
}
sprintf("The mean is %.2f", ans)
library(readr)
read.csv("pbc.tsv", sep = "\t")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(ggplot2)
library(tidyverse)
library(dplyr)
read.csv("pbc.tsv", sep = "\t")
read.csv("pbc.tsv", sep = "\t")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(ggplot2)
library(tidyverse)
library(dplyr)
read.csv("pbc.tsv", sep = "\t")
pbc <- read.csv("pbc.tsv", sep = "\t")
ggplot(data = pbc, aes(age))%>%
geom_histogram()
ggplot(data = pbc, aes(age))+
geom_histogram()
fill = 'white)
ggplot(data = pbc, aes(age))+
geom_histogram(color = 'Black',
ggplot(data = pbc, aes(age))+
geom_histogram(color = 'black',
fill = 'white')
shapiro.test(pbc$age)
ggplot(data = pbc, aes(chol))+
geom_histogram(color = 'black',
fill = 'white')
a <- c()
for (i in 1:nrow(pbc)){
a[i] <- pbc$bili[i] - mean(pbc$bili)
}
median(a)
a <- c()
for (i in 1:nrow(pbc)){
a[i] <- abs(pbc$bili[i] - mean(pbc$bili))
}
median(a)
pbc %>%
filter(sex == 'm')%>%
summarise(have = n(edema == 1))
pbc %>%
filter(sex == 'm')%>%
group_by(edema)%>%
summarise(n())
pbc
pbc <- read.csv("pbc.tsv", sep = "\t")
pbc %>%
filter(sex = 'm)
pbc <- read.csv("pbc.tsv", sep = "\t")
pbc %>%
filter(sex = 'm')
pbc <- read.csv("pbc.tsv", sep = "\t")
pbc %>%
filter(sex == 'm')
pbc %>%
filter(sex == 'm')%>%
group_by(edema)%>%
summarise(n())
3/(36+5+3)
pbc %>%
filter(sex == 'f)
pbc %>%
filter(sex == 'f')
pbc %>%
filter(sex == 'f')%>%
select(trt)
pbc %>%
filter(sex == 'f')%>%
select(trt)%>%
unique()
pbc %>%
filter(sex == 'f')%>%
select(trt)%>%
summarise(1/n())
pbc %>%
filter(sex == "f")%>%
filter(trt = 1)
pbc %>%
filter(sex == "f")%>%
filter(trt == 1)
pbc %>%
filter(sex == 'f')%>%
select(trt)%>%
summarise(1/n())
pbc %>%
filter(sex == "f")%>%
filter(trt == 1)%>%
summarise(n())
pbc %>%
filter(sex == "f")%>%
filter(trt == 1)%>%
summarise(n())
pbc %>%
filter(sex == 'f')%>%
select(trt)%>%
summarise(137/n())
pbc %>%
filter(sex == "f")%>%
filter(trt == 1)%>%
summarise(n())
pbc %>%
filter(sex == 'f')%>%
select(trt)%>%
summarise(n())
pbc %>%
filter(sex == "f")%>%
filter(trt == 1)%>%
summarise(n())
pbc %>%
filter(sex == 'f')%>%
select(trt)%>%
summarise(n())
sprintf("The probability of being on D-penicillamine given that you are female is %.2f", 137/374)
