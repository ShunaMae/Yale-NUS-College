caption = "Source: Star Wars API (https://swapi.dev/)"
) +
geom_text_repel(
aes(label = films)
) +
scale_y_continuous(
breaks = seq(0, 0.4, 0.1),
labels = scales::percent_format(accuracy = 5)
) +
theme(plot.title = element_text(hjust = 0.5))
feminine_perc <- starwars |>
unnest_longer(films) |>
group_by(films, gender) |>
summarize(total = n()) |>
mutate(percentage = total / sum(total)) |>
filter(gender == "feminine") |>
select(films, percentage) |>
print()
release <- tribble(
~movie, ~year,
"A New Hope", 1977,
"The Empire Strikes Back", 1980,
"Return of the Jedi", 1983,
"The Phantom Menace", 1999,
"Attack of the Clones", 2002,
"Revenge of the Sith", 2005,
"The Force Awakens", 2015
)
perc_year <- left_join(feminine_perc, release, by = c("films" = "movie"))
ggplot(perc_year, aes(year, percentage)) +
geom_point() +
geom_smooth(formula = y~ x,
method = "lm"
) +
labs(
title = "Gender Ratio of Characters in Star Wars Movies",
x = "Year",
y = "Feminine Characters",
caption = "Source: Star Wars API (https://swapi.dev/)"
) +
geom_text_repel(
aes(label = films)
) +
scale_y_continuous(
breaks = seq(0, 0.4, 0.1),
labels = scales::percent_format(accuracy = 5)
) +
theme(plot.title = element_text(hjust = 0.5))
pmap(list(10, 1:10, 2:11), runif)
styler:::style_selection()
styler:::style_selection()
release <- tribble(
~movie, ~year,
"A New Hope", 1977,
"The Empire Strikes Back", 1980,
"Return of the Jedi", 1983,
"The Phantom Menace", 1999,
"Attack of the Clones", 2002,
"Revenge of the Sith", 2005,
"The Force Awakens", 2015
)
perc_year <- left_join(feminine_perc, release, by = c("films" = "movie"))
ggplot(perc_year, aes(year, percentage)) +
geom_point() +
geom_smooth(
formula = y ~ x,
method = "lm"
) +
labs(
title = "Gender Ratio of Characters in Star Wars Movies",
x = "Year",
y = "Feminine Characters",
caption = "Source: Star Wars API (https://swapi.dev/)"
) +
geom_text_repel(
aes(label = films)
) +
scale_y_continuous(
breaks = seq(0, 0.4, 0.1),
labels = scales::percent_format(accuracy = 5)
) +
theme(plot.title = element_text(hjust = 0.5))
knitr::opts_chunk$set(echo = TRUE, messag= FALSE)
library(tidyverse)
musicians_tbl <- tibble(
name = c("Keith", "John", "Paul"),
band = c("Stones", "Beetles", "Beetles"),
instrument = c("guitar", "guitar", "bass")
)
musicians_tbl
musicians_df <- data.frame(
name = c("Keith", "John", "Paul"),
band = c("Stones", "Beetles", "Beetles"),
instrument = c("guitar", "guitar", "bass")
)
musicians_df
musicians_list <- list(
name = c("Keith", "John", "Paul"),
band = c("Stones", "Beetles", "Beetles"),
instrument = c("guitar", "guitar", "bass")
)
str(musicians_list)
data <- list(musicians_tbl, musicians_df, musicians_list)
class(musicians_tbl)
class(musicians_df)
class(musicians_list)
map_at(data, function(x) class(x))
knitr::opts_chunk$set(message = FALSE)
names = c("Keith", "John", "Paul")
bands = c("Stones", "Beatles", "Beatles")
instruments = c("guitar", "guitar", "bass")
musicians_tbl <- tibble(
name = names,
band = bands,
instrument = instruments
)
musicians_tbl
knitr::opts_chunk$set(message=FALSE, fig.align = 'center')
data = matrix(c(80, 40, 40, 50), ncol=2, nrow=2)
colnames(data)= c("pancreatic cancer", "no pancreatic cancer")
row.names(data)= c("smoker", "no smokers")
data
sprintf("%g cm", 150 - (1.4 * sqrt(36)))
x = 1.96 * sqrt(36)
sprintf("The tallest is %g cm", 150 + x)
sprintf("The shortest is %g cm", 150 - x)
height <- function(height){
x <- (height - 150) / sqrt(36)
y <- 0
z <- 0
if (height > 150){y <-  "above"}
else{y <-  "below"}
if (x > 1){z <- "very tall"}
else if(x > 0){z <- "slightly taller than average"}
else if(x > -1){z <- "slightly shorter than average"}
else{z <- "very short"}
sprintf("The individual is %.2f SDs %s average height. In other words, this person is %s.", abs(x),y,z)
}
height(170)
styler:::style_selection()
nrow(pbc %>%
filter(sex == "m" & edema == 1)) /
nrow(pbc %>%
filter(sex == "m"))
knitr::opts_chunk$set(message=FALSE, fig.align = 'center')
library(tidyverse)
read.csv("pbc.tsv", sep = "\t")
data = matrix(c(80, 40, 40, 50), ncol=2, nrow=2)
colnames(data)= c("pancreatic cancer", "no pancreatic cancer")
row.names(data)= c("smoker", "no smokers")
data
is_smoker = (80+40)/sum(data)
has_pancreatic_cancer = (80+40)/sum(data)
smoker_and_cancer = 80 / sum(data)
is_smoker + has_pancreatic_cancer - smoker_and_cancer
abs(180-150) / sqrt(36)
round(abs(140-150) / sqrt(36), digits = 2)
sprintf("%g cm", 150 - (1.4 * sqrt(36)))
x = 1.96 * sqrt(36)
sprintf("The tallest is %g cm", 150 + x)
sprintf("The shortest is %g cm", 150 - x)
random_pop = rnorm(n = 4000, mean = 150, sd = 6)
sum(150-x < random_pop & random_pop < 150+x) / length(random_pop)
sprintf("shortest : %g, tallest : %g",
quantile(rnorm(4000, 150, 6), 0.025),
quantile(rnorm(4000, 150, 6), 0.975))
height <- function(height) {
x <- (height - 150) / sqrt(36)
y <- 0
z <- 0
if (height > 150) {
y <- "above"
} else {
y <- "below"
}
if (x > 1) {
z <- "very tall"
} else if (x > 0) {
z <- "slightly taller than average"
} else if (x > -1) {
z <- "slightly shorter than average"
} else {
z <- "very short"
}
sprintf("The individual is %.2f SDs %s average height. In other words, this person is %s.", abs(x), y, z)
}
patients <- c(50,30,20,10,10)
lesions <- c(0,1,2,3,4)
s <- 0
for (i in 1:5){
s <- s + (patients[i]*lesions[i])
ans <- s / sum(patients)
}
sprintf("The mean is %.2f", ans)
pbc <- read.csv("pbc.tsv", sep = "\t")
ggplot(data = pbc, aes(age))+
geom_histogram(color = 'black',
fill = 'white',
binwidth = 5)
summary(pbc$age)
ggplot(data = pbc, aes(chol))+
geom_histogram(color = 'black',
fill = 'white',
binwidth = 100)
summary(pbc$chol)
chol <- na.omit(pbc[["chol"]])
for (i in 1:length(chol)){
if (chol[i] > 800){
chol[i] = chol[i] / 10
}
}
hist(chol)
summary(chol)
a <- c()
for (i in 1:nrow(pbc)){
a[i] <- abs(pbc$bili[i] - mean(pbc$bili))
}
median(a)
nrow(pbc %>%
filter(sex == "m" & edema == 1)) /
nrow(pbc %>%
filter(sex == "m"))
x = nrow(pbc %>%
filter(sex == "f" &trt == 1)) /
nrow(pbc %>%
filter(sex == "f"))
sprintf("The probability of being on D-penicillamine given that you are     female is %.2f", x)
# P(F)
P_f <- nrow(pbc %>% filter(sex == "f")) /
nrow(pbc)
# P(D)
P_d <- nrow(pbc %>% filter(trt == 1)) /
nrow(pbc)
# P(F and D)
P_fd <- nrow(pbc %>% filter(sex == "f" & trt == 1)) /
nrow(pbc)
P_f * P_d - P_fd
Qf <- nrow(pbc[pbc$age>50,]) / nrow(pbc)
sprintf("The probability of being older than 50 is %.2f", Qf)
g <- nrow(pbc %>%
filter(ascites == 1)) / nrow(pbc)
sprintf("The probability of a patient having ascites is %.4f", g)
Q_i <- nrow(pbc %>%
filter(copper > 200 & platelet > 400)) / nrow(pbc)
sprintf("The probability of having a albumin level above 200 and            platelet count above 400 is %.4f", Q_i)
# P(S)
P_s <- nrow(pbc %>% filter(spiders == 1)) / nrow(pbc)
for (x in 1:3) {
P_dx <- nrow(pbc %>%
filter(stage == x)) / nrow(pbc)
P_s_dx <- nrow(pbc %>%
filter(spiders == 1 &
stage == x)) / nrow(pbc)
k <- sprintf("For the stage %g, the P(S&d%g) is %.4f and P(S)*P(dx) is  %.4f.", x, x, P_s_dx, P_s * P_dx)
print(k)
}
nrow(pbc %>% filter(spiders == 1 & trt == 1)) /
nrow(pbc %>% filter(trt == 1))
sessionInfo()
knitr::opts_chunk$set(echo = TRUE)
data = data.frame(height = c(82, 93, 61, 74, 69, 70, 53,
71, 62, 85, 94, 78, 66, 71,
64, 73, 87, 91, 56, 78, 87),
genotype = c(rep("AA", 7), rep("Aa", 7), rep("aa", 7)))
rnorm_fixed = function(N, mu = 0, sd = 1)
scale(rnorm(N)) * sd + mu
y = c(rnorm(15), exp(rnorm(15)), runif(20, min = -3, max = 0))
x = rnorm_fixed(50, mu = 0, sd = 1)
y = c(rnorm(15), exp(rnorm(15)), runif(20, min = -3, max = 0))
x = rnorm_fixed(50, mu = 0, sd = 1)
y2 = rnorm_fixed(50, mu = 0.5, sd = 1.5)
value = c(y, y2)
group = rep(c('y1', 'y2'), each = 50)
a = t.test(y, y2, var.equal = TRUE)
a
b = lm(value ~ 1 + group_y2)
group = rep(c('y1', 'y2'), each = 50)
rnorm_fixed = function(N, mu = 0, sd = 1)
scale(rnorm(N)) * sd + mu
y = c(rnorm(15), exp(rnorm(15)), runif(20, min = -3, max = 0))
x = rnorm_fixed(50, mu = 0, sd = 1)
y2 = rnorm_fixed(50, mu = 0.5, sd = 1.5)
value = c(y, y2)
group = rep(c('y1', 'y2'), each = 50)
a = t.test(y, y2, var.equal = TRUE)
a
b = lm(value ~ 1 + group_y2)
summary(b)
b = lm(value ~ 1 + group_y2)
b = lm(value ~ 1 + group)
summary(b)
value = c(y, y2)
group = rep(c('y1', 'y2'), each = 50)
group_y2 = ifelse(group == 'y2', 1, 0)
b = lm(value ~ 1 + group_y2)
b = lm(value ~ 1 + group)
summary(b)
value = c(y, y2)
group = rep(c('y1', 'y2'), each = 50)
group_y2 = ifelse(group == 'y2', 1, 0)
b = lm(value ~ 1 + group_y2)
library(datasets)
data <- esoph
head(data)
model <- aov(ncases ~ agegp + alcgp + agegp*alcgp, data = data)
summary(model)
interaction.plot(x.factor = data$alcgp, #x-axis variable
trace.factor = data$agegp, #variable for lines
response = data$ncases, #y-axis variable,
col = c("red", "green", "blue", "orange", "pink", "black"),
fun = median, #metric to plot
ylab = "ncases",
xlab = "alcohol consumption",
lty = 1, #line type
lwd = 2, #line width
trace.label = "Age")
library(datasets)
data <- esoph
head(data)
library(datasets)
data <- esoph
head(data)
model <- aov(ncases ~ agegp + alcgp + agegp*alcgp, data = data)
summary(model)
interaction.plot(x.factor = data$alcgp, #x-axis variable
trace.factor = data$agegp, #variable for lines
response = data$ncases, #y-axis variable,
col = c("red", "green", "blue", "orange", "pink", "black"),
fun = median, #metric to plot
ylab = "ncases",
xlab = "alcohol consumption",
lty = 1, #line type
lwd = 2, #line width
trace.label = "Age")
library(datasets)
data <- esoph
head(data)
model <- aov(ncases ~ agegp*alcgp, data = data)
summary(model)
interaction.plot(x.factor = data$alcgp, #x-axis variable
trace.factor = data$agegp, #variable for lines
response = data$ncases, #y-axis variable,
col = c("red", "green", "blue", "orange", "pink", "black"),
fun = median, #metric to plot
ylab = "ncases",
xlab = "alcohol consumption",
lty = 1, #line type
lwd = 2, #line width
trace.label = "Age")
library(datasets)
data <- esoph
head(data)
model <- aov(ncases ~ agegp + alcgp + agegp*alcgp, data = data)
summary(model)
interaction.plot(x.factor = data$alcgp, #x-axis variable
trace.factor = data$agegp, #variable for lines
response = data$ncases, #y-axis variable,
col = c("red", "green", "blue", "orange", "pink", "black"),
fun = median, #metric to plot
ylab = "ncases",
xlab = "alcohol consumption",
lty = 1, #line type
lwd = 2, #line width
trace.label = "Age")
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(tidygraph)
library(ggraph)
library(tidyverse)
library(igraph)
edges <- read_table("email-Eu-core.txt.gz",
col_names = FALSE
) |>
mutate(
from = X1 + 1,
to = X2 + 1
) |>
select(-X1, -X2)
nodes <- read_table("email-Eu-core-department-labels.txt.gz",
col_names = FALSE
) |>
mutate(
person = X1 + 1,
department = X2
) |>
select(-X1, -X2)
nodes
edges
eu_netw <- tbl_graph(nodes = nodes, edges = edges) |> print()
# for adding one to every person, we could do eu_netw + 1.
# for clarity, I did it in the chunk above.
ggraph(eu_netw, layout = "kk") +
geom_edge_bend(
alpha = 0.1,
arrow = arrow(length = unit(2, "mm"))
) +
geom_node_point(colour = "brown", alpha = 0.5)
contracted_eu_igraph <-
eu_netw |>
as.igraph() |>
# contract multiple vertices into 1
contract(nodes$department + 1)
vertex_attr(contracted_eu_igraph, "dept") <-
0:(gorder(contracted_eu_igraph) - 1)
contracted_directed_netw <-
as_tbl_graph(contracted_eu_igraph) |>
convert(to_simple) |>
activate(edges) |>
mutate(weight = lengths(.tidygraph_edge_index)) |>
print()
ggraph(contracted_directed_netw, layout = "stress") +
geom_edge_fan(
aes(colour = weight, end_cap = label_rect(node2.dept)),
alpha = 0.5,
arrow = arrow(length = unit(0.2, "cm"))
) +
geom_node_label(aes(label = dept), colour = "brown") +
theme(legend.position = c(1, 1), legend.justification = c(1, 1))
undirected_simple_netw <-
contracted_directed_netw |>
convert(to_undirected) |>
convert(to_simple) |>
activate(edges) |>
mutate(weight = map_dbl(.orig_data, ~ sum(pull(., weight)))) |>
print()
hierarchy <-
undirected_simple_netw |>
convert(to_hierarchical_clusters, weights = weight)
layout <- create_layout(hierarchy, "dendrogram")
ggraph(layout) +
geom_edge_elbow()
layout <- create_layout(hierarchy, "dendrogram")
ggraph(layout) +
geom_edge_elbow() +
coor_flip()
layout <- create_layout(hierarchy, "dendrogram")
ggraph(layout) +
geom_edge_elbow() +
cood_flip()
layout <- create_layout(hierarchy, "dendrogram")
ggraph(layout) +
geom_edge_elbow()
data = read.delim("badinteraction.tsv", delim="\t")
setwd("E:/Academics/Stats/Week 10")
data = read.delim("badinteraction.tsv", delim="\t")
data = read.delim("badinteraction.tsv", sep="\t")
data
data
model_bad <- aov(response ~ factora * factorb, data = data)
summary(data)
summary(model_bad)
library(tidyverse)
library(tidyverse)
ggplot(data, aes(factora, response, color = factorb))+
geom_point()
ggplot(data, aes(factora, response, color = factorb))+
geom_point() +
geom_line(aes(factora, reponse))
library(tidyverse)
ggplot(data, aes(factora, response, color = factorb))+
geom_point() +
geom_line(aes(factora, response))
library(tidyverse)
ggplot(data, aes(factora, response, color = factorb))+
geom_point() +
geom_line(aes(factora, response), method = 'lm')
library(tidyverse)
ggplot(data, aes(factora, response, color = factorb))+
geom_point() +
geom_smooth(aes(factora, response), method = 'lm' )
library(tidyverse)
ggplot(data, aes(factora, response, color = factorb))+
geom_point() +
geom_smooth(aes(factora, response), method = 'lm', formula = y ~ x )
library(tidyverse)
ggplot(data, aes(factora, response, color = factorb))+
geom_point() +
geom_smooth(method = 'lm', formula = y ~ x )
model_interative <- aov(response ~ factora * factorb, data = data)
summary(model_interactive)
model_interactive <- aov(response ~ factora * factorb, data = data)
summary(model_interactive)
model_really_bad <- aov(reponse ~ factora + factorb, data = data)
model_really_bad <- aov(response ~ factora + factorb, data = data)
model_really_bad <- aov(response ~ factora + factorb, data = data)
summary(model_really bad)
summary(model_really _bad)
summary(model_really_bad)
model_really_bad <- aov(response ~ factora + factorb, data = data)
summary(model_really_bad)
ggplot(data = data, aes(factora, reponse)) +
geom_point(colour = factorb)+
geom_smooth(method = 'lm', formula y~x)
model_really_bad <- aov(response ~ factora + factorb, data = data)
summary(model_really_bad)
ggplot(data = data, aes(factora, reponse)) +
geom_point(colour = factorb) +
geom_smooth(method = 'lm', formula y~x)
model_really_bad <- aov(response ~ factora + factorb, data = data)
summary(model_really_bad)
ggplot(data = data, aes(factora, reponse)) +
geom_point(colour = factorb) +
geom_smooth(method = 'lm', formula = y~x)
model_really_bad <- aov(response ~ factora + factorb, data = data)
summary(model_really_bad)
ggplot(data = data, aes(factora, reponse)) +
geom_point(colour = data$factorb) +
geom_smooth(method = 'lm', formula = y~x)
model_really_bad <- aov(response ~ factora + factorb, data = data)
summary(model_really_bad)
ggplot(data = data, aes(factora, response)) +
geom_point(colour = data$factorb) +
geom_smooth(method = 'lm', formula = y~x)
