###########################################################
##Section A: Understanding variables and correcting mistakes
###########################################################
#(1) Import the "protectedAreas.xlsx" dataset and save it as <paData>. Remember to load any packages required. [2 marks]
library(readxl)
paData <- read_excel("protectedAreas.xlsx")
#(2) What code will help you check what variables are in <paData> and what are their types. [1 mark]
summary(paData)
#(3) Identify which variables should be changed to factor type. [3 marks]
View(paData)
#(2) What code will help you check what variables are in <paData> and what are their types. [1 mark]
str(paData)
#(5) Use code to automatically check whether there are any NAs in the dataset. State how many NAs there are. [2 marks]
apply(is.na(paData), 2, which)
summary(paData)
#(6) Using basic R within R Studio, plot 3 separate boxplots for <elevation>, <richness> and <temp> to identify outliers. [3 marks]
boxplot(paData$elevation)
boxplot(paData$richness)
boxplot(paData$temp)
#(6) Using basic R within R Studio, plot 3 separate boxplots for <elevation>, <richness> and <temp> to identify outliers. [3 marks]
boxplot(paData$elevation)
boxplot(paData$richness)
#(6) Using basic R within R Studio, plot 3 separate boxplots for <elevation>, <richness> and <temp> to identify outliers. [3 marks]
boxplot(paData$elevation)
title("elevatipon")
title("elevation")
#(6) Using basic R within R Studio, plot 3 separate boxplots for <elevation>, <richness> and <temp> to identify outliers. [3 marks]
boxplot(paData$elevation)
title("elevation")
#(6) Using basic R within R Studio, plot 3 separate boxplots for <elevation>, <richness> and <temp> to identify outliers. [3 marks]
boxplot(paData$elevation)
title("boxplot of elevation")
boxplot(paData$richness)
boxplot(paData$richness)
#(8) Identify which observation(s) the outlier(s) comes from. [4 marks]
which(paData$richness > 80)
#(9) Remove the row(s) you identified in (8) from the dataset. [1 mark]
?delete_row
#(9) Remove the row(s) you identified in (8) from the dataset. [1 mark]
?delete
#(9) Remove the row(s) you identified in (8) from the dataset. [1 mark]
paDatra <- paData[-6,]
boxplot(richness)
boxplot(paData$richness)
boxplot(paData$richness)
boxplot(paData$temp)
boxplot(paData$richness)
#(9) Remove the row(s) you identified in (8) from the dataset. [1 mark]
paData <- paData[-6,]
boxplot(paData$richness)
boxplot(paData$richness)
boxplot(paData$temp)
#(9) Remove the row(s) you identified in (8) from the dataset. [1 mark]
paData <- paData[-6,]
boxplot(paData$richness)
###########################################################
##Section B: Importing datasets into R
###########################################################
#(10) Import the "protectedAreas2.xlsx" dataset (this has been corrected from the earlier dataset) and save it as <paData2>. [1 mark]
paData2 <- read_excel("protectedArea2.xlsx")
###########################################################
##Section B: Importing datasets into R
###########################################################
#(10) Import the "protectedAreas2.xlsx" dataset (this has been corrected from the earlier dataset) and save it as <paData2>. [1 mark]
paData2 <- read_excel("protectedAreas2.xlsx")
#(11) Change the type of all the variables that need to be changed. [1 mark]
str(paData)
paData2$site <- as.factor(paData2$site)
paData2$impact <- as.logical(paData2$impact)
paData2$country <- as.factor(paData2$country)
#(12) Install the "ggplot2" and "GGally" packages. [2 marks]
install.packages("ggplot2")
install.packages("GGally")
library(ggplot2)
library(GGally)
#(13) Using "GGally", do a pairs plot of all the variables in <paData2>. [1 mark]
ggpairs(paData2)
#(15) Do a correlation plot of only the numeric variables in <paData2>. [3 marks]
?ggpairs
#(13) Using "GGally", do a pairs plot of all the variables in <paData2>. [1 mark]
ggpairs(paData2)
#(15) Do a correlation plot of only the numeric variables in <paData2>. [3 marks]
library(dplyr)
paData2 |>
select(-site, -impact, -country) |>
ggpairs
paData_numeric <- paData2 |> select(-site, -impact, -country)
ggpairs(paData_numeric)
paData_numeric <- paData2 |> select(-site, -impact, -country) |> ggpair()
paData_numeric <- paData2 |> select(-site, -impact, -country) |> ggpairs()
paData_numeric <- paData2 |> select(-site, -impact, -country) |> ggpairs() |> show()
###########################################################
##Section C: Data visualisation
###########################################################
#(17) What variable type is <temp> (categorical or continuous)? Draw a histogram of <temp> using ggplot2. [5 marks]
class(paData2$temp)
## elevation
boxplot(paData$elevation)
which(paData$elevation<quantile(paData$elevation,0.25)-1.5*IQR(paData$elevation))
which(paData$elevation>quantile(paData$elevation,0.75)+1.5*IQR(paData$elevation))
#(12) Install the "ggplot2" and "GGally" packages. [2 marks]
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(GGally)
###########################################################
##Section C: Data visualisation
###########################################################
#(17) What variable type is <temp> (categorical or continuous)? Draw a histogram of <temp> using ggplot2. [5 marks]
## continuous
paData2 |>
ggplot(aes(x = temp)) +
geom_hist()
###########################################################
##Section C: Data visualisation
###########################################################
#(17) What variable type is <temp> (categorical or continuous)? Draw a histogram of <temp> using ggplot2. [5 marks]
## continuous
paData2 |>
ggplot(aes(x = temp)) +
geom_histogram()
###########################################################
##Section C: Data visualisation
###########################################################
#(17) What variable type is <temp> (categorical or continuous)? Draw a histogram of <temp> using ggplot2. [5 marks]
## continuous
paData2 |>
ggplot(aes(x = temp)) +
geom_histogram(color = "white")+
###########################################################
##Section C: Data visualisation
###########################################################
#(17) What variable type is <temp> (categorical or continuous)? Draw a histogram of <temp> using ggplot2. [5 marks]
## continuous
paData2 |>
ggplot(aes(x = temp)) +
geom_histogram(color = "white")
###########################################################
##Section C: Data visualisation
###########################################################
#(17) What variable type is <temp> (categorical or continuous)? Draw a histogram of <temp> using ggplot2. [5 marks]
## continuous
paData2 |>
ggplot(aes(x = temp)) +
geom_histogram(color = "white")
###########################################################
##Section C: Data visualisation
###########################################################
#(17) What variable type is <temp> (categorical or continuous)? Draw a histogram of <temp> using ggplot2. [5 marks]
## continuous
paData2 |>
ggplot(aes(x = temp)) +
geom_histogram(color = "white") +
labs(
x = "temperature"
y = "frequency"
)
###########################################################
##Section C: Data visualisation
###########################################################
#(17) What variable type is <temp> (categorical or continuous)? Draw a histogram of <temp> using ggplot2. [5 marks]
## continuous
paData2 |>
ggplot(aes(x = temp)) +
geom_histogram(color = "white") +
labs(
x = "temperature",
y = "frequency"
)
paData_numeric <- paData2 |>
dplyr::select(-site, -impact, -country) |>
ggpairs() |>
show()
#(13) Using "GGally", do a pairs plot of all the variables in <paData2>. [1 mark]
pairs(paData2)
ggpairs(paData2[, 2:4])
source("F:/Y4S2/data analysis/Week 2/Week02/HEx 02_Shuna.R", echo=TRUE)
###########################################################
##Section C: Data visualisation
###########################################################
#(17) What variable type is <temp> (categorical or continuous)? Draw a histogram of <temp> using ggplot2. [5 marks]
## continuous
paData2 |>
ggplot(aes(x = temp)) +
geom_histogram(color = "white") +
labs(
x = "temperature",
y = "frequency"
)
ggcorr(paData2[,2:4], pallette = "RdBu", label = TRUE)
ggpairs(paData2[, 2:4])
ggcorr(paData2[,2:4], pallette = "RdBu", label = TRUE)
ggpairs(paData2[, 2:4])
#(13) Using "GGally", do a pairs plot of all the variables in <paData2>. [1 mark]
ggpairs(paData2)
#(18) I want to see how the data is distributed in <country> and <site>. What should I use? [1 mark]
table(paData2$site, paData2$country, dnn = c("site", "country"))
#(21) Do the plot you identified in (20). (Note: you can still get marks here even if you identified the wrong plot in (20).) [5 marks]
paData2 |>
ggplot(aes(x = impact, y = richness)) +
geom_boxplot()
#(21) Do the plot you identified in (20). (Note: you can still get marks here even if you identified the wrong plot in (20).) [5 marks]
paData2 |>
ggplot(aes(x = impact, y = richness)) +
geom_boxplot() +
reorder(TRUE, FALSE)
#(21) Do the plot you identified in (20). (Note: you can still get marks here even if you identified the wrong plot in (20).) [5 marks]
paData2 |>
ggplot(aes(x = impact, y = richness)) +
geom_boxplot() +
reorder("TRUE", "FALSE")
#(21) Do the plot you identified in (20). (Note: you can still get marks here even if you identified the wrong plot in (20).) [5 marks]
paData2 |>
ggplot(aes(x = reorder(impact), y = richness)) +
geom_boxplot()
#(21) Do the plot you identified in (20). (Note: you can still get marks here even if you identified the wrong plot in (20).) [5 marks]
paData2 |>
ggplot(aes(x = impact, y = richness)) +
geom_boxplot()
#(Bonus question) From your plot in (21), Do you think that <impact> explains <richness> well? Explain your reasons. [2 marks]
var.test(paData2$impact, paData$richness)
#(Bonus question) From your plot in (21), Do you think that <impact> explains <richness> well? Explain your reasons. [2 marks]
t.test(paData2$impact, paData$richness)
#(Bonus question) From your plot in (21), Do you think that <impact> explains <richness> well? Explain your reasons. [2 marks]
impact_true <- paData2$richness[paData2$impact == TRUE]
impact_false <- paData2$richness[paData2$impact == FALSE]
var.test(impact_true, impact_false)
t.test(impact_true, impact_false)
#(19) Do what you identified in (18). (Note: you can still get marks here even if you identified the wrong plot in (18).) [3 marks]
prop.table(table(paData2$site, paData2$country, dnn = c("site", "country")), 1)
#(19) Do what you identified in (18). (Note: you can still get marks here even if you identified the wrong plot in (18).) [3 marks]
table(paData2$site, paData2$country, dnn = c("site", "country"))
var.test(impact_true, impact_false)
#(21) Do the plot you identified in (20). (Note: you can still get marks here even if you identified the wrong plot in (20).) [5 marks]
paData2 |>
ggplot(aes(x = impact, y = richness)) +
geom_boxplot()
#(21) Do the plot you identified in (20). (Note: you can still get marks here even if you identified the wrong plot in (20).) [5 marks]
paData2 |>
ggplot(aes(x = impact, y = richness)) +
geom_boxplot(notch = T)
#(21) Do the plot you identified in (20). (Note: you can still get marks here even if you identified the wrong plot in (20).) [5 marks]
paData2 |>
ggplot(aes(x = impact, y = richness)) +
geom_boxplot(notch = T) +
scale_x_discrete(labels("Not impacted", "Impacted"))
scale_x_discrete(labels(c("Not impacted", "Impacted"))
#(21) Do the plot you identified in (20). (Note: you can still get marks here even if you identified the wrong plot in (20).) [5 marks]
paData2 |>
ggplot(aes(x = impact, y = richness)) +
geom_boxplot(notch = T) +
scale_x_discrete(labels(c("Not impacted", "Impacted")))
#(21) Do the plot you identified in (20). (Note: you can still get marks here even if you identified the wrong plot in (20).) [5 marks]
paData2 |>
ggplot(aes(x = impact, y = richness)) +
geom_boxplot(notch = T) +
scale_x_discrete(labels = c("Not impacted", "Impacted"))
#(21) Do the plot you identified in (20). (Note: you can still get marks here even if you identified the wrong plot in (20).) [5 marks]
paData2 |>
ggplot(aes(x = impact, y = richness)) +
geom_boxplot(notch = T) +
scale_x_discrete(labels = c("Not impacted", "Impacted")) +
legend(x = NULL)
#(21) Do the plot you identified in (20). (Note: you can still get marks here even if you identified the wrong plot in (20).) [5 marks]
paData2 |>
ggplot(aes(x = impact, y = richness)) +
geom_boxplot(notch = T) +
scale_x_discrete(labels = c("Not impacted", "Impacted")) +
labs(x = NULL)
impact_true <- paData2$richness[paData2$impact == TRUE]
impact_false <- paData2$richness[paData2$impact == FALSE]
var.test(impact_true, impact_false)
t.test(impact_true, impact_false)
wilcox.test(impact_true, impact_false)
paData2 |>
ggplot(aes(x = impact, y = richness)) +
geom_violin()
shapiro.test(impact_true)
wilcox.test(impact_true, impact_false, exact = FALSE)
impact_true <- paData2$richness[paData2$impact == TRUE]
impact_false <- paData2$richness[paData2$impact == FALSE]
shapiro.test(impact_true)
shapiro.test(impact_false)
?shapiro.test
