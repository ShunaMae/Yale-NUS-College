library(tidyverse)
library(dplyr)
library(readxl)
###########################################################
##Section A: ANOVA
###########################################################
#(1) Import the innoculationData.xlsx dataset as inDa. [1 mark]
innoculationData <- read_csv("innoculationData.xlsx")
###########################################################
##Section A: ANOVA
###########################################################
#(1) Import the innoculationData.xlsx dataset as inDa. [1 mark]
inDa <- read_csv("innoculationData.xlsx")
###########################################################
##Section A: ANOVA
###########################################################
#(1) Import the innoculationData.xlsx dataset as inDa. [1 mark]
inDa <- read_csv("innoculationData.xlsx")
#(2) In this dataset, <titre> is the response variable. Convert whatever variable(s) need(s) to be converted to factor(s). [2 marks]
str(inDa)
###########################################################
##Section A: ANOVA
###########################################################
#(1) Import the innoculationData.xlsx dataset as inDa. [1 mark]
inDa <- read_excel("innoculationData.xlsx")
#(2) In this dataset, <titre> is the response variable. Convert whatever variable(s) need(s) to be converted to factor(s). [2 marks]
str(inDa)
source("F:/Y4S2/data analysis/Week 6/HEx 05_noNeedToSubmit.R", echo=TRUE)
#(2) In this dataset, <titre> is the response variable. Convert whatever variable(s) need(s) to be converted to factor(s). [2 marks]
inDa <- inDa |>
mutate(
indiv = as.factor(indiv),
sex = as.factor(sex),
site = as.factor(site),
treatment = as,factor(treatment)
)
#(2) In this dataset, <titre> is the response variable. Convert whatever variable(s) need(s) to be converted to factor(s). [2 marks]
inDa <- inDa |>
mutate(
indiv = as.factor(indiv),
sex = as.factor(sex),
site = as.factor(site),
treatment = as.factor(treatment)
)
#(3) Draw separate boxplots to explore <titre> explained by:
#(a) <site>. [1 mark]
boxplot(inDa$site, inDa$titre)
#(b) <sex>. [1 mark]
boxplot(inDa$sex, inDa$titre)
#(b) <treatment>. [1 mark]
boxplot(inDa$treatment, inDa$titre)
#(3) Draw separate boxplots to explore <titre> explained by:
#(a) <site>. [1 mark]
boxplot(inDa$site, inDa$titre)
#(b) <sex>. [1 mark]
boxplot(inDa$sex, inDa$titre)
#(b) <treatment>. [1 mark]
boxplot(inDa$treatment, inDa$titre)
#(4) Fit an ANOVA to explain <titre> by <site>. [2 marks]
q4 <- lm(titre ~ site, data = inDa)
#(5) Check assumptions graphically. Do you see any potential problems? [1 mark]
plot(q4)
#(5) Check assumptions graphically. Do you see any potential problems? [1 mark]
mfrow(par = c(2,2))
plot(q4)
#(5) Check assumptions graphically. Do you see any potential problems? [1 mark]
par(mfrow = c(2,2))
plot(q4)
#(6) Check whether the residuals of the model are normally distributed. What is your conclusion? [1 mark]
shapiro.test(resid(q4))
#(7) Assume that the residuals are not normally distributed. Perform the correct test instead. [1 mark]
kruskal.test(titre ~ site, inDa)
?wilcox.test
#(8) Do pairwise Wilcoxon tests to compare every level of <site> with a Bonferroni correction. [2 marks]
wilcox.test(titre ~ site, paired = T)
#(8) Do pairwise Wilcoxon tests to compare every level of <site> with a Bonferroni correction. [2 marks]
wilcox.test(titre ~ site, paired = T, data = inDa)
#(8) Do pairwise Wilcoxon tests to compare every level of <site> with a Bonferroni correction. [2 marks]
wilcox.test(x = site, y = titre, paired = T, data = inDa)
#(8) Do pairwise Wilcoxon tests to compare every level of <site> with a Bonferroni correction. [2 marks]
wilcox.test(x = inDa$site, y = inDa$titre, paired = T)
#(8) Do pairwise Wilcoxon tests to compare every level of <site> with a Bonferroni correction. [2 marks]
pairwise.wilcox.test(titre ~ site, data = inDa)
#(8) Do pairwise Wilcoxon tests to compare every level of <site> with a Bonferroni correction. [2 marks]
?pairwise.wilcox.test
#(8) Do pairwise Wilcoxon tests to compare every level of <site> with a Bonferroni correction. [2 marks]
pairwise.wilcox.test(x = titre, g = site)
#(8) Do pairwise Wilcoxon tests to compare every level of <site> with a Bonferroni correction. [2 marks]
pairwise.wilcox.test(x = inDa$titre, g = inDa$site)
#(8) Do pairwise Wilcoxon tests to compare every level of <site> with a Bonferroni correction. [2 marks]
pairwise.wilcox.test(x = inDa$titre, g = inDa$site, method = "bonferroni")
#(10) Use ggplot to produce an appropriate plot to graphically show your result. [2 marks]
inDa |>
ggplot(site, titre) |>
geom_violin()
#(10) Use ggplot to produce an appropriate plot to graphically show your result. [2 marks]
inDa |>
ggplot(aes(site, titre) )|>
geom_violin()
#(10) Use ggplot to produce an appropriate plot to graphically show your result. [2 marks]
inDa |>
ggplot(aes(site, titre) ) +
geom_violin()
#(10) Use ggplot to produce an appropriate plot to graphically show your result. [2 marks]
inDa |>
ggplot(aes(site, titre) ) +
geom_boxlot(notch = T)
#(10) Use ggplot to produce an appropriate plot to graphically show your result. [2 marks]
inDa |>
ggplot(aes(site, titre) ) +
geom_boxplot(notch = T)
#(11) Fit an ANOVA to explain <titre> by <treatment> and <sex> (allowed to interact). [2 marks]
q11 <- lm(titire ~ treatement* sex)
#(11) Fit an ANOVA to explain <titre> by <treatment> and <sex> (allowed to interact). [2 marks]
q11 <- lm(titire ~ treatement* sex, data = inDa)
#(11) Fit an ANOVA to explain <titre> by <treatment> and <sex> (allowed to interact). [2 marks]
q11 <- lm(titre ~ treatement* sex, data = inDa)
#(11) Fit an ANOVA to explain <titre> by <treatment> and <sex> (allowed to interact). [2 marks]
q11 <- lm(titre ~ treatment* sex, data = inDa)
#(12) Simplify the model till you reach the minimum adequate model. [3 marks]
summary(q11)
q12 <- updgrae(q11, ~., -treatment:sex)
q12 <- upgrade(q11, ~., -treatment:sex)
q12 <- update(q11, ~., -treatment:sex)
summary(q12)
q12 <- update(q11, ~., -treatment:sex)
summary(q12)
q12 <- update(q11, ~., -treatment:sex)
summary(q12)
#(12) Simplify the model till you reach the minimum adequate model. [3 marks]
summary(q11)
q12 <- update(q11, ~. -treatment:sex)
summary(q12)
