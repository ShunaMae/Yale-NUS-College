###########################################################
##Section A: Inspecting variables
###########################################################
#(1) Let's import the "Data_Biodiversity.txt" dataset into R as a dataframe called <dBio>. [1 mark]
dBio <- read_table("Data_Biodiversity.txt")
library(readr)
library(tidyverse)
#(1) Let's import the "Data_Biodiversity.txt" dataset into R as a dataframe called <dBio>. [1 mark]
dBio <- read_table("Data_Biodiversity.txt")
View(dBio)
#(2) Change <specType> to a factor and inspect the data types to make sure. [2 marks]
dBio$specType <- as.factor(dBio$specType)
glimpse(dBio)
#(3) Let's check all the continuous variables for outliers using boxplots (drawn using Base R code). [4 marks]
dBio |>
select(-sepcType, trapped) |>
ggpairs()
#(3) Let's check all the continuous variables for outliers using boxplots (drawn using Base R code). [4 marks]
dBio |>
select(-sepcType, trapped) |>
ggpair()
#(3) Let's check all the continuous variables for outliers using boxplots (drawn using Base R code). [4 marks]
dBio |>
select(-sepcType, trapped) |>
ggpairs()
?ggpair
#(3) Let's check all the continuous variables for outliers using boxplots (drawn using Base R code). [4 marks]
dBio |>
pivot_longer(names_to = col_names) |>
show()
#(3) Let's check all the continuous variables for outliers using boxplots (drawn using Base R code). [4 marks]
dBio |>
pivot_longer(names_to = col_names) |>
print()
#(3) Let's check all the continuous variables for outliers using boxplots (drawn using Base R code). [4 marks]
dBio |>
pivot_longer(
cols = c("dVal", "weight", "height", "lifeEx"),
names_to = "continuous variables"
) |>
print()
#(3) Let's check all the continuous variables for outliers using boxplots (drawn using Base R code). [4 marks]
dBio |>
select(-specType, -trapped) |>
pivot_longer(
cols = c("dVal", "weight", "height", "lifeEx"),
names_to = "continuous variables"
) |>
print()
#(3) Let's check all the continuous variables for outliers using boxplots (drawn using Base R code). [4 marks]
dBio |>
select(-specType, -trapped) |>
pivot_longer(
cols = c("dVal", "weight", "height", "lifeEx"),
names_to = "continuous_variables"
) |>
ggplot(aes(continuous_variables)) +
geom_boxplot()
#(3) Let's check all the continuous variables for outliers using boxplots (drawn using Base R code). [4 marks]
dBio |>
select(-specType, -trapped) |>
pivot_longer(
cols = c("dVal", "weight", "height", "lifeEx"),
names_to = "continuous_variables"
) |>
ggplot(aes(continuous_variables)) +
geom_boxplot(width = 0.5)
#(3) Let's check all the continuous variables for outliers using boxplots (drawn using Base R code). [4 marks]
dBio |>
select(-specType, -trapped) |>
pivot_longer(
cols = c("dVal", "weight", "height", "lifeEx"),
names_to = "continuous_variables"
) |>
ggplot(aes(continuous_variables)) +
geom_boxplot(width = 1)
#(3) Let's check all the continuous variables for outliers using boxplots (drawn using Base R code). [4 marks]
lapply(c(dBio$dVal, dBio$weight, dBio$height, dBio$lifeEx), function = boxplot)
#(3) Let's check all the continuous variables for outliers using boxplots (drawn using Base R code). [4 marks]
lapply(c(dBio$dVal, dBio$weight, dBio$height, dBio$lifeEx), boxplot)
#(3) Let's check all the continuous variables for outliers using boxplots (drawn using Base R code). [4 marks]
apply(c(dBio$dVal, dBio$weight, dBio$height, dBio$lifeEx), boxplot)
#(3) Let's check all the continuous variables for outliers using boxplots (drawn using Base R code). [4 marks]
lapply(c(dBio$dVal, dBio$weight, dBio$height, dBio$lifeEx), boxplot)
source("F:/Y4S2/data analysis/Week 4/HEx 03_Shuna.R", echo=TRUE)
dBio |>
select(-spectype, -trapped) |>
ggpairs()
dBio |>
select(-specType, -trapped) |>
ggpairs()
#(4) Try plotting the same boxplots again using ggplot. [4 marks]
dBio |>
select(-specType, -trapped) |>
pivot_longer(
cols = c("dVal", "weight", "height", "lifeEx"),
names_to = "continuous_variables"
) |>
ggplot(aes(continuous_variables)) +
geom_boxplot()
source("F:/Y4S2/data analysis/Week 4/HEx 03_Shuna.R", echo=TRUE)
#(4) Try plotting the same boxplots again using ggplot. [4 marks]
dBio |>
select(-specType, -trapped) |>
pivot_longer(
cols = c("dVal", "weight", "height", "lifeEx"),
names_to = "continuous_variables"
) |>
group_by(continous_variables) |>
ggplot(aes(continuous_variables)) +
geom_boxplot()
boxplot(dBio$dVal)
?wilcox.test
?wilcox.test
boxplot(dBio$dVal)
boxplot(dBio$weight)
boxplot(dBio$height)
boxplot(dBio$lifeEx)
par(mfrow = c(1,3))
boxplot(dBio$dVal)
boxplot(dBio$weight)
boxplot(dBio$height)
boxplot(dBio$lifeEx)
par(mfrow = c(1,4))
boxplot(dBio$dVal)
boxplot(dBio$weight)
boxplot(dBio$height)
boxplot(dBio$lifeEx)
#(4) Try plotting the same boxplots again using ggplot. [4 marks]
dBio |>
select(-specType, -trapped) |>
pivot_longer(
cols = c("dVal", "weight", "height", "lifeEx"),
names_to = "continuous_variables"
) |>
ggplot(aes(continuous_variables, value)) +
geom_boxplot()
#(6) Is <lifeEx> normally distributed? Check both graphically and using the Shapiro-Wilk test. [2 marks]
qqplot(dBio$lifeEx)
#(6) Is <lifeEx> normally distributed? Check both graphically and using the Shapiro-Wilk test. [2 marks]
qqnorm(dBio$lifeEx)
#(6) Is <lifeEx> normally distributed? Check both graphically and using the Shapiro-Wilk test. [2 marks]
par(mfrow = c(1,1))
qqnorm(dBio$lifeEx)
shapiro.test(dBio$lifeEx)
#(7) Is <weight> normally distributed? Check both graphically and using the Shapiro-Wilk test. [2 marks]
qqnorm(dBio$weight)
shapiro.test(dBio$weight)
#(8) Check whether the variances in <weight> for the two groups in <specType> are equal. [3 marks]
var.test(dBio$weight[dBio$specType == 'A'],dBio$weight[dBio$specType == 'B'] )
###########################################################
##Section B: Simple tests (Part 1)
###########################################################
#(9) Do a ggpairs plot for all the variables. [1 mark]
dBio |>
ggpairs()
var.test(weight ~ specType, dBio)
#(11) Let's check the counts in the different categories of the variables <specType> and <trapped> individually. [2 marks]
dBio |>
group_by(specType) |>
summarise(count = nrow())
#(11) Let's check the counts in the different categories of the variables <specType> and <trapped> individually. [2 marks]
dBio |>
group_by(specType) |>
summarise(count = nrows())
#(10) Do you see any potential patterns? [no marks]
plot(weight ~ height, dBio)
#(11) Let's check the counts in the different categories of the variables <specType> and <trapped> individually. [2 marks]
dBio |>
grou_by(specType) |>
summaruse(count = nrow(n))
#(11) Let's check the counts in the different categories of the variables <specType> and <trapped> individually. [2 marks]
dBio |>
grou_by(specType) |>
summarise(count = nrow(n))
#(11) Let's check the counts in the different categories of the variables <specType> and <trapped> individually. [2 marks]
dBio |>
group_by(specType) |>
summarise(count = nrow(n))
#(11) Let's check the counts in the different categories of the variables <specType> and <trapped> individually. [2 marks]
dBio |>
group_by(specType) |>
summarise(count = nrow(specType))
#(11) Let's check the counts in the different categories of the variables <specType> and <trapped> individually. [2 marks]
dBio |>
group_by(specType)
#(11) Let's check the counts in the different categories of the variables <specType> and <trapped> individually. [2 marks]
dBio |>
group_by(specType) |>
summarise(count = nrow(specType))
#(11) Let's check the counts in the different categories of the variables <specType> and <trapped> individually. [2 marks]
dBio |>
group_by(specType) |>
summarise(count = nrows())
#(11) Let's check the counts in the different categories of the variables <specType> and <trapped> individually. [2 marks]
dBio |>
group_by(specType) |>
summarise(count = nrow())
#(11) Let's check the counts in the different categories of the variables <specType> and <trapped> individually. [2 marks]
dBio |>
group_by(specType) |>
summarise(count = n())
dBio |>
group(trapped) |>
summarise(count = n())
dBio |>
group_by(trapped) |>
summarise(count = n())
?p.adjust
str(dBio)
str(dBio)
#(7) Is <weight> normally distributed? Check both graphically and using the Shapiro-Wilk test. [2 marks]
qqnorm(dBio$weight)
shapiro.test(dBio$weight)
# not normally distributed
plot(dBio$weight)
library(readr)
library(tidyverse)
library(GGally)
#(1) Let's import the "Data_Biodiversity.txt" dataset into R as a dataframe called <dBio>. [1 mark]
dBio <- read_table("Data_Biodiversity.txt")
#(2) Change <specType> to a factor and inspect the data types to make sure. [2 marks]
dBio$specType <- as.factor(dBio$specType)
str(dBio)
#(4) Try plotting the same boxplots again using ggplot. [4 marks]
dBio |>
select(-specType, -trapped) |>
pivot_longer(
cols = c("dVal", "weight", "height", "lifeEx"),
names_to = "continuous_variables"
) |>
ggplot(aes(continuous_variables, value)) +
geom_boxplot()
library(car)
## since weight is not normally distributed,
## we cannot use var.test
leveneTest(weight ~ specType, dBio)
shapio.test(dBio$weight[dBio$specType == 1])
shapiro.test(dBio$weight[dBio$specType == 1])
shapiro.test(dBio$weight[dBio$specType == '`'])
shapiro.test(dBio$weight[dBio$specType == '1'])
shapiro.test(dBio$weight[dBio$specType == 'A'])
shapiro.test(dBio$weight)
#(11) Let's check the counts in the different categories of the variables <specType> and <trapped> individually. [2 marks]
dBio |>
group_by(specType) |>
summarise(count = n())
source("F:/Y4S2/data analysis/Week 4/HEx 03_Shuna.R", echo=TRUE)
dBio |>
group_by(trapped) |>
summarise(count = n())
#(11) Let's check the counts in the different categories of the variables <specType> and <trapped> individually. [2 marks]
dBio |>
group_by(specType) |>
summarise(count = n())
dBio |>
group_by(trapped) |>
summarise(count = n())
#(13) Create a 2-way contingency table of the two variables: <specType> is the explanatory variable, <trapped> is the response variable. [2 marks]
tbl <- matrix(
c(12,13, 13, 12), nrow = 2
)
tbl
?matrix
#(13) Create a 2-way contingency table of the two variables: <specType> is the explanatory variable, <trapped> is the response variable. [2 marks]
tbl <- matrix(
c(12,13, 13, 12), nrow = 2,
dimnames = c("true", "false")
)
#(13) Create a 2-way contingency table of the two variables: <specType> is the explanatory variable, <trapped> is the response variable. [2 marks]
tbl <- matrix(
c(12,13, 13, 12), nrow = 2,
dimnames = list("true", "false")
)
#(13) Create a 2-way contingency table of the two variables: <specType> is the explanatory variable, <trapped> is the response variable. [2 marks]
tbl <- matrix(
c(12,13, 13, 12), nrow = 2,
dimnames = list(list("true", "false"), list("a", "b"))
)
tbl
#(13) Create a 2-way contingency table of the two variables: <specType> is the explanatory variable, <trapped> is the response variable. [2 marks]
tbl <- matrix(
c(12,13, 13, 12), nrow = 2,
dimnames = list(list("a", "b"), list("true", "false"))
)
tbl
#(11) Let's check the counts in the different categories of the variables <specType> and <trapped> individually. [2 marks]
dBio |>
group_by(specType) |>
summarise(count = n())
dBio |>
group_by(trapped) |>
summarise(count = n())
#(13) Create a 2-way contingency table of the two variables: <specType> is the explanatory variable, <trapped> is the response variable. [2 marks]
dBio |>
group_by(specType, trapped) |>
summarise(n = n())
tbl <- matrix(
c(9,3,3,10), nrow = 2,
dimnames = list(list("a", "b"), list("true", "false"))
)
tbl
tbl
#(16) Perform the test in (15). What is the p-value? Are the 2 variables associated? [3 marks]
chisq.test(tbl)
#(16) Perform the test in (15). What is the p-value? Are the 2 variables associated? [3 marks]
fisher.test(tbl)
#(20) Check both graphically and using the Shapiro-Wilk test whether <height> normally distributed. [2 marks]
qqnorm(dBio$height)
shapiro.test(dBio$height)
shapiro.test(dBio$height)
#(21) Check whether the variances in <height> for the two groups in <specType> are equal. [3 marks]
var.test(height ~ specType, dBio)
#(22) Based on your answers in (20) and (21), perform the appropriate test to see whether the heights of species A and B are different. [2 marks]
t.test(height ~ specType, dBio)
#(23) From your results in (22), state your conclusion and, if A and B are different, which species has a greater mean height. [2 marks]
dBio |>
ggplot(
aes(specType, height)
) +
geom_boxplot()
#(22) Based on your answers in (20) and (21), perform the appropriate test to see whether the heights of species A and B are different. [2 marks]
t.test(height ~ specType, dBio, alternative = "greater")
#(22) Based on your answers in (20) and (21), perform the appropriate test to see whether the heights of species A and B are different. [2 marks]
t.test(height ~ specType, dBio)
t.test(height ~ specType, dBio, alternative = "greater")
#(16) Perform the test in (15). What is the p-value? Are the 2 variables associated? [3 marks]
dBio |>
group_by(specType, trapped) |>
summarise(n = n()) |>
ungroup() |>
pivot_wider(names_from = trapped, values_from = n) |>
select(-specType) |>
fisher.test()
#(20) Check both graphically and using the Shapiro-Wilk test whether <height> normally distributed. [2 marks]
qqnorm(dBio$height)
shapiro.test(dBio$height)
library(readr)
library(tidyverse)
library(GGally)
#(1) Let's import the "Data_Biodiversity.txt" dataset into R as a dataframe called <dBio>. [1 mark]
dBio <- read_table("Data_Biodiversity.txt")
#(2) Change <specType> to a factor and inspect the data types to make sure. [2 marks]
dBio$specType <- as.factor(dBio$specType)
str(dBio)
par(mfrow = c(1,4))
boxplot(dBio$dVal)
boxplot(dBio$weight)
boxplot(dBio$height)
boxplot(dBio$lifeEx)
#(4) Try plotting the same boxplots again using ggplot. [4 marks]
dBio |>
select(-specType, -trapped) |>
pivot_longer(
cols = c("dVal", "weight", "height", "lifeEx"),
names_to = "continuous_variables"
) |>
ggplot(aes(continuous_variables, value)) +
geom_boxplot()
#(6) Is <lifeEx> normally distributed? Check both graphically and using the Shapiro-Wilk test. [2 marks]
par(mfrow = c(1,1))
qqnorm(dBio$lifeEx)
shapiro.test(dBio$lifeEx)
#(7) Is <weight> normally distributed? Check both graphically and using the Shapiro-Wilk test. [2 marks]
qqnorm(dBio$weight)
shapiro.test(dBio$weight)
## as the height is not normally distributed,
## it is not appripriate to use var.test
## because it assumes normal distribution
shapiro.test(dBio$weight[dBio$specType == 'A'])
shapiro.test(dBio$weight[dBio$specType == 'B'])
## instead, we can use Levene's test
## which is less sensitive to deviation from normality
library(car)
leveneTest(weight ~ specType, dBio)
###########################################################
##Section B: Simple tests (Part 1)
###########################################################
#(9) Do a ggpairs plot for all the variables. [1 mark]
dBio |>
ggpairs()
#(10) Do you see any potential patterns? [no marks]
plot(weight ~ height, dBio)
#(11) Let's check the counts in the different categories of the variables <specType> and <trapped> individually. [2 marks]
dBio |>
group_by(specType) |>
summarise(count = n())
dBio |>
group_by(trapped) |>
summarise(count = n())
#(13) Create a 2-way contingency table of the two variables: <specType> is the explanatory variable, <trapped> is the response variable. [2 marks]
dBio |>
group_by(specType, trapped) |>
summarise(n = n()) |>
pivot_wider(names_from = trapped, values_from = n)
#(16) Perform the test in (15). What is the p-value? Are the 2 variables associated? [3 marks]
dBio |>
group_by(specType, trapped) |>
summarise(n = n()) |>
ungroup() |>
pivot_wider(names_from = trapped, values_from = n) |>
select(-specType) |>
fisher.test()
#(20) Check both graphically and using the Shapiro-Wilk test whether <height> normally distributed. [2 marks]
qqnorm(dBio$height)
shapiro.test(dBio$height)
#(16) Perform the test in (15). What is the p-value? Are the 2 variables associated? [3 marks]
dBio |>
group_by(specType, trapped) |>
summarise(n = n()) |>
ungroup() |>
pivot_wider(names_from = trapped, values_from = n) |>
select(-specType) |>
fisher.test()
#(16) Perform the test in (15). What is the p-value? Are the 2 variables associated? [3 marks]
dBio |>
group_by(specType, trapped) |>
summarise(n = n()) |>
ungroup() |>
pivot_wider(names_from = trapped, values_from = n) |>
select(-specType) |>
fisher.test()
